/*
 * Bruce - A PostgreSQL Database Replication System
 *
 * Portions Copyright (c) 2007, Connexus Corporation
 *
 * Permission to use, copy, modify, and distribute this software and its
 * documentation for any purpose, without fee, and without a written
 * agreement is hereby granted, provided that the above copyright notice and
 * this paragraph and the following two paragraphs appear in all copies.
 *
 * IN NO EVENT SHALL CONNEXUS CORPORATION BE LIABLE TO ANY PARTY FOR DIRECT,
 * INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES, INCLUDING LOST
 * PROFITS, ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION,
 * EVEN IF CONNEXUS CORPORATION HAS BEEN ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 * CONNEXUS CORPORATION SPECIFICALLY DISCLAIMS ANY WARRANTIES, INCLUDING,
 * BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
 * FOR A PARTICULAR PURPOSE. THE SOFTWARE PROVIDED HEREUNDER IS ON AN "AS IS"
 * BASIS, AND CONNEXUS CORPORATION HAS NO OBLIGATIONS TO PROVIDE MAINTENANCE,
 * SUPPORT, UPDATES, ENHANCEMENTS, OR MODIFICATIONS.
*/
package com.netblue.bruce.cluster;

import com.netblue.bruce.ReplicationTest;
import static org.junit.Assert.assertEquals;
import static org.junit.Assert.fail;
import org.junit.Before;
import org.junit.Test;

import java.util.Set;

/**
 * Tests the <code>ClusterFactory</code>
 * @author lanceball
 */
public class ClusterFactoryTest extends ReplicationTest
{
    private ClusterFactory clusterFactory;

    @Before public void setUp()
    {
        super.setUp();
        try
        {
            // Always ensure our cluster factory is configured with the default before each test
            ClusterFactory.setClusterFactoryClass(ClusterFactory.DEFAULT_CLUSTER_FACTORY_CLASS);
            clusterFactory = ClusterFactory.getClusterFactory();
            assertEquals("Unexpected class for ClusterFactory", ClusterFactory.DEFAULT_CLUSTER_FACTORY_CLASS, clusterFactory.getClass());
        }
        catch (Exception e)
        {
            e.printStackTrace();
            fail(e.getLocalizedMessage());
        }
    }

    /**
     * Tests setting a custom <code>ClusterFactory</code> implemenetation
     */
    @Test public void testGetCustomClusterFactory()
    {
        try
        {
            ClusterFactory.setClusterFactoryClass(MockClusterFactory.class);
            ClusterFactory customFactory = ClusterFactory.getClusterFactory();
            assertEquals("Unexpected ClusterFactory class found", MockClusterFactory.class, customFactory.getClass());
        }
        catch (Exception e)
        {
            e.printStackTrace();
            fail("Cannot instantiate custom cluster");
        }
    }

    /**
     * Simple test class to test custom factory usage
     */
    static class MockClusterFactory extends ClusterFactory
    {
        /**
         * Gets a <code>Cluster</code> instance for the current node topology.
         *
         * @param the name of the cluster
         *
         * @return the <code>Cluster</code> - never null
         */
        public Cluster getCluster(String name)
        {
            return null;
        }

        /**
         * Gets all <code>Cluster</code>s currently configured.
         *
         * @return a <code>Set</code> of all <code>Cluster</code>s - never null.
         */
        public Set<Cluster> getAllClusters()
        {
            return null;
        }

        /**
         * Searches Clusters for Node with name and returns it if found
         *
         * @param name the name of the node
         *
         * @return the node or null
         */
        public Node getNode(String name)
        {
            return null;  // TODO: Autogenerated method stub
        }
    }
}
